start = statement+
statement = ws s:(var / function / class / expression ) linechange
	  { return s }

var = 'var' s:symbol t:type a:varAssingment?
    { return { type: 'var', name: s, typeExpression: t, assingment: a } }

type = t:type_?
     { return t === '' ? undefined : t }

type_ = ws ':' ws t:typeExpression space
     { return t }

typeExpression = typeConstructor / typeStruct / typeFunction

typeFunction = '(' p:typeList? ')' ws '->' r:typeExpression
	     { return { type: 'functionType', parameters: p === '' ? [] : p, returnType: r }}

typeList = t:typeExpression tt:typeListTail*
	 { return [t].concat(tt) }

typeListTail = ',' t:typeExpression
	     { return t }

typeStruct = '{' t:typeFields? '}'
	   { return { type: 'structType', fields: t } }

typeFields = t:typeField ts:typeFieldTail*
	   { return [t].concat(ts) }

typeFieldTail = ',' t:typeField
	      { return t }

typeField =  k:key ':' t:typeExpression
	  { return { key: k, value: t }}

typeConstructor = s:symbol a:typeArguments?
	       { return { type: 'constructorType', constructor: s, args: a === '' ? [] : a }}

typeArguments = '<' t:typeExpression ts:typeArgumentTail* '>'
	 { return [t].concat(ts) }

typeArgumentTail = ',' t:typeExpression
	    { return t }

varAssingment = '=' e:expression
	      { return e }

function = i:symbol l:lambda
	 { l.name = i; return l }

block = ws '{' s:statement* '}' space
      { return s }

parameterList = '(' p:parameters? ')'
	      { return p === '' ? [] : p }

parameters = p:parameter ps:parameterListTail*
	   { return [p].concat(ps) }

parameterListTail = ',' p:parameter
		  { return p }

parameter = s:symbol t:type
	  { return { type: 'parameter', symbol: s, typeExpression: t === '' ? undefined : t } }

symbol = ws i:[a-zA-Z_$] is:[a-zA-Z_0-9$]* space
       { return i + is.join('')}

identifier = s:symbol
	   { return { type: 'identifier', name: s } }

class = 'class' i:symbol '{' ifs:interface* '}'
      { return { type: 'class', name: 'i', interfaces: ifs }}

interface = ws p:('public')? i:(function / identifier) ws
	  { return { visibility: p ? 'public' : 'private', interface: i}}

arguments = e:expression args:argumentTail*
	  { return [e].concat([args]) }

argumentTail = ',' e:expression
	     { return e }

expressionOp = ws f:(opApplication / opAssingment / index / operation) space
	     { return f }

opApplication = '(' args:arguments? ')'
	      { return function(t) { return { type: 'application', callee: t, arguments: args }} }

opAssingment = '=' e:expression
	     { return function(lhs) { return { type: 'assingment', lhs: lhs, rhs: e }}}

expression = a:expressionAtom o:expressionOp*
	   { var c = a; o.forEach(function(f) { c = f(c) }); return c }

expressionAtom = ws a:(terminal / parenthesis / array / struct / lambda) space
	       { return a }

index = '[' e:expression ']'
      { return function(lhs) { return { type: 'index', lhs: lhs, index: e }}}

operation = op:op rhs:expression
	  { return function(lhs) {return { type: 'operation', lhs: lhs, rhs: rhs, operation: op }}}

parenthesis = '(' e:expression ')'
	    { return { type: 'parenthesis', expression: e }}

terminal = literal / identifier

lambda = ps:parameterList t:type body:block
       { return { type: 'function', parameters:ps, body: body, typeExpression: t }}

op = o:[.\-+*%/]+
   { return o.join('') }

ws = [ \n\t]*

space = [ \t]*
linechange = space '\n' ws

struct = '{' f:fields? '}'
       { return { type: 'struct', value: f ? f : [] } }

fields = f:field fs:fieldTail*
       { return [f].concat(fs) }

fieldTail = ',' f:field
	  { return f }

field = k:key ':' v:expression
      { return {key: k, value: v} }

key = symbol / stringSymbol

array = '[' e:expression es:expressionTail* ']'
      { return { type: 'array', value: [e].concat(es)} }

expressionTail = ',' e:expression
	       { return e }

literal = ws lit:(number / string) space
	{ return lit }

number = v:[0-9]+ vs:('.' [0-9]+)?
       { return { type: 'number', value: v.concat(vs ? '.' + vs[1].join('') : []).join('') } }

string = s:stringSymbol
       { return { type: 'string', value: s }}

stringSymbol = ws '"' s:([^"]*) '"' space
	     { return s.join('') }